"use strict";(self.webpackChunksymphony_docs=self.webpackChunksymphony_docs||[]).push([[557],{223:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var t=s(4848),i=s(8453);const a={sidebar_position:15},r="3. Claims",o={id:"docs/concepts/claims",title:"3. Claims",description:"Claims are a fundamental concept in Symphony that represent instances of",source:"@site/docs/docs/concepts/15-claims.md",sourceDirName:"docs/concepts",slug:"/docs/concepts/claims",permalink:"/docs/docs/concepts/claims",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/docs/concepts/15-claims.md",tags:[],version:"current",sidebarPosition:15,frontMatter:{sidebar_position:15},sidebar:"docsSidebar",previous:{title:"2. Simple Schema",permalink:"/docs/docs/concepts/simple-schema"},next:{title:"4. Collections",permalink:"/docs/docs/concepts/collections"}},l={},c=[{value:"What is a Claim?",id:"what-is-a-claim",level:2},{value:"Anatomy of a Claim",id:"anatomy-of-a-claim",level:2},{value:"The reconciliation loop",id:"the-reconciliation-loop",level:2},{value:"Advantages of declarative management [need better title]",id:"advantages-of-declarative-management-need-better-title",level:2},{value:"Common Status Fields",id:"common-status-fields",level:2},{value:"1. Conditions",id:"1-conditions",level:3},{value:"2. State",id:"2-state",level:3}];function d(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"3-claims",children:"3. Claims"})}),"\n",(0,t.jsx)(n.p,{children:"Claims are a fundamental concept in Symphony that represent instances of\nResourceGroups. They define the desired state of a set of resources, which\nSymphony continuously works to maintain."}),"\n",(0,t.jsx)(n.h2,{id:"what-is-a-claim",children:"What is a Claim?"}),"\n",(0,t.jsx)(n.p,{children:"A Claim is a Kubernetes custom resource that:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"References a specific ResourceGroup"}),"\n",(0,t.jsx)(n.li,{children:"Provides values for the parameters defined in the ResourceGroup"}),"\n",(0,t.jsx)(n.li,{children:"Represents the desired state of a set of Kubernetes resources"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"anatomy-of-a-claim",children:"Anatomy of a Claim"}),"\n",(0,t.jsxs)(n.p,{children:["Here's an example of a Claim for a ",(0,t.jsx)(n.code,{children:"WebApplication"})," ResourceGroup:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"apiVersion: symphony.k8s.aws/v1alpha1\nkind: WebApplication\nmetadata:\n  name: my-web-app\nspec:\n  name: awesome-app\n  replicas: 3\n  image: nginx:latest\n  ports:\n    - port: 80\n      targetPort: 8080\n  env:\n    DB_HOST: mydb.example.com\n    LOG_LEVEL: debug\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsx)(n.p,{children:"The spec fields of a Claim correspond to the parameters defined in the\nResourceGroup."})}),"\n",(0,t.jsx)(n.h2,{id:"the-reconciliation-loop",children:"The reconciliation loop"}),"\n",(0,t.jsx)(n.p,{children:"Symphony manages Claims through a continuous reconciliation process:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Desired state detection"}),": Symphony observes the Claim, which represents\nthe desired state of resources."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Current state assessment"}),": Symphony talks to the api-server and checks\nthe current state of resources in the cluster related to the Claim."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Difference identification"}),": Any differences between the desired state\n(Claim) and the current state are identified."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"State Reconciliation"}),": Symphony takes necessary actions to align the\ncurrent state with the desired state. This may involve creating, updating,\nor deleting resources as needed."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Status Updates"}),": The Claim's status is updated to reflect the current\nstate of reconciliation and any issues encountered."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Continuous Loop"}),": This process repeats regularly, ensuring the cluster\nstate always converges towards the desired state defined in the Claim."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"advantages-of-declarative-management-need-better-title",children:"Advantages of declarative management [need better title]"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Declarative Management"}),": Users define what they want, not how to get there."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Self-healing"}),": The system continuously works to maintain the desired state."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Idempotency"}),": The same Claim always results in the same end state,\nregardless of the current state."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Abstraction"}),": Complex resource relationships are managed behind the scenes."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Consistency"}),": All resources for an application are managed as a unit."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Auditability"}),": The Claim serves as a single source of truth for the\napplication's desired state."]}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{title:"Best Practices",type:"tip",children:(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Treat claims as declarative definitions of your application's desired state.\nUse version control for your Claims to track changes over time."}),"\n",(0,t.jsx)(n.li,{children:"Leverage labels and annotations in Claims for organization and filtering."}),"\n",(0,t.jsx)(n.li,{children:"Regularly review Claims to ensure they reflect current requirements."}),"\n",(0,t.jsx)(n.li,{children:"Use Symphony's dry-run feature to preview reconciliation actions before\napplying changes to Claims."}),"\n",(0,t.jsx)(n.li,{children:"Monitor Claim statuses to understand the current state of your applications."}),"\n"]})}),"\n",(0,t.jsx)(n.h2,{id:"common-status-fields",children:"Common Status Fields"}),"\n",(0,t.jsxs)(n.p,{children:["Symphony automatically injects two common fields into the status of all claims:\n",(0,t.jsx)(n.strong,{children:"Conditions"})," and ",(0,t.jsx)(n.strong,{children:"State"}),". These fields provide crucial information about the\ncurrent status of the claim and its associated resources."]}),"\n",(0,t.jsx)(n.h3,{id:"1-conditions",children:"1. Conditions"}),"\n",(0,t.jsx)(n.p,{children:"Conditions are a standard Kubernetes concept that Symphony leverages to provide\ndetailed status information. Each condition represents a specific aspect of the\nclaim's state. Common conditions include:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Ready"}),": Indicates whether the claim is fully reconciled and operational."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Progressing"}),": Shows if the claim is in the process of reaching the desired\nstate."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Degraded"}),": Signals that the claim is operational but not functioning\noptimally."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Error"}),": Indicates that an error has occurred during reconciliation."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Each condition typically includes the following properties:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Type"}),': The name of the condition (e.g., "Ready").']}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Status"}),': Either "True", "False", or "Unknown".']}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"LastTransitionTime"}),": When the condition last changed."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Reason"}),": A brief, machine-readable explanation for the condition's state."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Message"}),": A human-readable description of the condition."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'status:\n  conditions:\n    - type: Ready\n      status: "True"\n      lastTransitionTime: "2024-07-23T01:01:59Z"\n      reason: ResourcesAvailable\n      message: "All resources are available and configured correctly"\n'})}),"\n",(0,t.jsx)(n.h3,{id:"2-state",children:"2. State"}),"\n",(0,t.jsx)(n.p,{children:"The State field provides a high-level summary of the claim's current status.\nIt is typically one of the following values:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Pending"}),": The claim is being processed, but resources are not yet fully\ncreated or configured."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Running"}),": All resources are created and the claim is operational."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Failed"}),": An error occurred and the claim could not be fully reconciled."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Terminating"}),": The claim is in the process of being deleted."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Degraded"}),": The claim is operational but not functioning optimally."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Unknown"}),": The claim's status cannot be determined."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"status:\n  state: Running\n"})}),"\n",(0,t.jsx)(n.p,{children:"These common status fields provide users with a consistent and informative way\nto check the health and state of their claims across different ResourceGroups.\nThey are essential for monitoring, troubleshooting, and automating operations\nbased on the status of Symphony-managed resources."})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>o});var t=s(6540);const i={},a=t.createContext(i);function r(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);