"use strict";(self.webpackChunkkro_docs=self.webpackChunkkro_docs||[]).push([[249],{1659:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>p,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"docs/getting-started/deploy-a-resource-group","title":"Deploy Your First ResourceGroup","description":"This guide will walk you through creating your first Resource Group in KRO.","source":"@site/docs/docs/getting-started/02-deploy-a-resource-group.md","sourceDirName":"docs/getting-started","slug":"/docs/getting-started/deploy-a-resource-group","permalink":"/docs/docs/getting-started/deploy-a-resource-group","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/docs/getting-started/02-deploy-a-resource-group.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"docsSidebar","previous":{"title":"Installing KRO","permalink":"/docs/docs/getting-started/Installation"},"next":{"title":"Concepts","permalink":"/docs/category/concepts"}}');var t=s(4848),i=s(8453);const a={sidebar_position:2},c="Deploy Your First ResourceGroup",o={},l=[{value:"What is a <strong>ResourceGroup</strong>?",id:"what-is-a-resourcegroup",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Create your Application ResourceGroup",id:"create-your-application-resourcegroup",level:2},{value:"Deploy the ResourceGroup",id:"deploy-the-resourcegroup",level:3},{value:"Create your Application Instance",id:"create-your-application-instance",level:3},{value:"Delete the Application instance",id:"delete-the-application-instance",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"deploy-your-first-resourcegroup",children:"Deploy Your First ResourceGroup"})}),"\n",(0,t.jsxs)(n.p,{children:["This guide will walk you through creating your first Resource Group in ",(0,t.jsx)(n.strong,{children:"KRO"}),".\nWe'll create a simple ",(0,t.jsx)(n.code,{children:"ResourceGroup"})," that demonstrates key KRO features."]}),"\n",(0,t.jsxs)(n.h2,{id:"what-is-a-resourcegroup",children:["What is a ",(0,t.jsx)(n.strong,{children:"ResourceGroup"}),"?"]}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.code,{children:"ResourceGroup"})," lets you create new Kubernetes APIs that deploy multiple\nresources together as a single, reusable unit. For example, instead of\nrepeatedly creating ",(0,t.jsx)(n.code,{children:"Deployments"}),", ",(0,t.jsx)(n.code,{children:"Services"})," and ",(0,t.jsx)(n.code,{children:"Ingress"})," resources\nseparately, you can create a ",(0,t.jsx)(n.code,{children:"ResourceGroup"})," that packages them into one\nreusable API. Users can then deploy resources as a single unit, ensuring they're\nalways created together with the right configuration."]}),"\n",(0,t.jsxs)(n.p,{children:["Under the hood, when you create a ",(0,t.jsx)(n.code,{children:"ResourceGroup"}),", KRO:"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Treats your resources as a Directed Acyclic Graph (DAG) to understand their\ndependencies"}),"\n",(0,t.jsx)(n.li,{children:"Validates resource definitions and detects the correct deployment order"}),"\n",(0,t.jsx)(n.li,{children:"Creates a new API (CRD) in your cluster"}),"\n",(0,t.jsx)(n.li,{children:"Configures itself to watch and serve instances of this API"}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{title:"info",type:"tip",children:(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"KRO"})," is a Kubernetes-native tool that only speaks ",(0,t.jsx)(n.strong,{children:"Kubernetes"}),"! No external\nservices or databases needed - just pure Kubernetes APIs. Whether it's native\nresources or custom ones, KRO understands and works with them all."]})}),"\n",(0,t.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,t.jsx)(n.p,{children:"Before you begin, make sure you have the following:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"KRO"})," ",(0,t.jsx)(n.a,{href:"/docs/docs/getting-started/Installation",children:"installed"})," and running in your Kubernetes\ncluster."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"kubectl"})," installed and configured to interact with your Kubernetes cluster."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"create-your-application-resourcegroup",children:"Create your Application ResourceGroup"}),"\n",(0,t.jsxs)(n.p,{children:["Let's create a Resource Group that combines a ",(0,t.jsx)(n.code,{children:"Deployment"}),", a ",(0,t.jsx)(n.code,{children:"Service"})," and\n",(0,t.jsx)(n.code,{children:"Ingress"}),". Save this as ",(0,t.jsx)(n.code,{children:"resourcegroup.yaml"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",metastring:'title="resourcegroup.yaml"',children:'apiVersion: kro.run/v1alpha1\nkind: ResourceGroup\nmetadata:\n  name: my-application\nspec:\n  # This becomes your CRD schema - defines what users can provide in their instances\n  schema:\n    apiVersion: v1alpha1\n    kind: Application\n    spec:\n      # Spec fields that users can provide.\n      name: string\n      image: string | default="nginx"\n      ingress:\n        enabled: boolean | default=false\n    status:\n      # Fields the controller will inject into instances status.\n      deploymentConditions: ${deployment.status.conditions}\n      availableReplicas: ${deployment.status.availableReplicas}\n\n  # Define the resources this API will manage.\n  resources:\n    - name: deployment\n      template:\n        apiVersion: apps/v1\n        kind: Deployment\n        metadata:\n          name: ${schema.spec.name} # Use the name provided by user\n        spec:\n          replicas: 3\n          selector:\n            matchLabels:\n              app: ${schema.spec.name}\n          template:\n            metadata:\n              labels:\n                app: ${schema.spec.name}\n            spec:\n              containers:\n                - name: ${schema.spec.name}\n                  image: ${schema.spec.image} # Use the image provided by user\n                  ports:\n                    - containerPort: 80\n\n    - name: service\n      template:\n        apiVersion: v1\n        kind: Service\n        metadata:\n          name: ${schema.spec.name}-service\n        spec:\n          selector: ${deployment.spec.selector.matchLabels} # Use the deployment selector\n          ports:\n            - protocol: TCP\n              port: 80\n              targetPort: 80\n\n    - name: ingress\n      includeWhen:\n        - ${schema.spec.ingress.enabled} # Only include if the user wants to create an Ingress\n      template:\n        apiVersion: networking.k8s.io/v1\n        kind: Ingress\n        metadata:\n          name: ${schema.spec.name}-ingress\n          annotations:\n            kubernetes.io/ingress.class: alb\n            alb.ingress.kubernetes.io/scheme: internet-facing\n            alb.ingress.kubernetes.io/target-type: ip\n            alb.ingress.kubernetes.io/healthcheck-path: /health\n            alb.ingress.kubernetes.io/listen-ports: \'[{"HTTP": 80}]\'\n            alb.ingress.kubernetes.io/target-group-attributes: stickiness.enabled=true,stickiness.lb_cookie.duration_seconds=60\n        spec:\n          rules:\n            - http:\n                paths:\n                  - path: "/"\n                    pathType: Prefix\n                    backend:\n                      service:\n                        name: ${service.metadata.name} # Use the service name\n                        port:\n                          number: 80\n'})}),"\n",(0,t.jsx)(n.h3,{id:"deploy-the-resourcegroup",children:"Deploy the ResourceGroup"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Create a ResourceGroup manifest file"}),": Create a new file with the\n",(0,t.jsx)(n.code,{children:"ResourceGroup"})," definition. You can use the example above."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsxs)(n.strong,{children:["Apply the ",(0,t.jsx)(n.code,{children:"ResourceGroup"})]}),": Use the ",(0,t.jsx)(n.code,{children:"kubectl"})," command to deploy the\nResourceGroup to your Kubernetes cluster:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"kubectl apply -f resourcegroup.yaml\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsxs)(n.strong,{children:["Inpsect the ",(0,t.jsx)(n.code,{children:"ResourceGroup"})]}),": Check the status of the resources created by\nthe ResourceGroup using the ",(0,t.jsx)(n.code,{children:"kubectl"})," command:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"kubectl get rg my-application -owide\n"})}),"\n",(0,t.jsxs)(n.p,{children:["You should see the ResourceGroup in the ",(0,t.jsx)(n.code,{children:"Active"})," state, along with relevant\ninformation to help you understand your application:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'NAME             APIVERSION   KIND          STATE    TOPOLOGICALORDER                     AGE\nmy-application   v1alpha1     Application   Active   ["deployment","service","ingress"]   49\n'})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"create-your-application-instance",children:"Create your Application Instance"}),"\n",(0,t.jsxs)(n.p,{children:["Now that your ",(0,t.jsx)(n.code,{children:"ResourceGroup"})," is created, KRO has generated a new API\n(Application) that orchestrates creation of the a ",(0,t.jsx)(n.code,{children:"Deployment"}),", a ",(0,t.jsx)(n.code,{children:"Service"}),", and\nan ",(0,t.jsx)(n.code,{children:"Ingress"}),". Let's use it!"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Create an Application instance"}),": Create a new file named ",(0,t.jsx)(n.code,{children:"instance.yaml"}),"\nwith the following content:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",metastring:'title="instance.yaml"',children:"apiVersion: kro.run/v1alpha1\nkind: Application\nmetadata:\n  name: my-application-instance\nspec:\n  name: my-awesome-app\n  ingress:\n    enabled: true\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Apply the Application instance"}),": Use the ",(0,t.jsx)(n.code,{children:"kubectl"})," command to deploy the\nApplication instance to your Kubernetes cluster:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"kubectl apply -f instance.yaml\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Inspect the Application instance"}),": Check the status of the resources"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"kubectl get applications\n"})}),"\n",(0,t.jsxs)(n.p,{children:["After a few seconds, you should see the Application instance in the ",(0,t.jsx)(n.code,{children:"Active"}),"\nstate:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"NAME                      STATE    SYNCED   AGE\nmy-application-instance   ACTIVE   True     10s\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Inspect the resources"}),": Check the resources created by the Application\ninstance:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"kubectl get deployments,services,ingresses\n"})}),"\n",(0,t.jsxs)(n.p,{children:["You should see the ",(0,t.jsx)(n.code,{children:"Deployment"}),", ",(0,t.jsx)(n.code,{children:"Service"}),", and ",(0,t.jsx)(n.code,{children:"Ingress"})," created by the\nApplication instance."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"NAME                             READY   UP-TO-DATE   AVAILABLE   AGE\ndeployment.apps/my-awesome-app   3/3     3            3           69s\n\nNAME                             TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)   AGE\nservice/my-awesome-app-service   ClusterIP   10.100.167.72   <none>        80/TCP    65s\n\nNAME                                               CLASS    HOSTS   ADDRESS   PORTS   AGE\ningress.networking.k8s.io/my-awesome-app-ingress   <none>   *                 80      62s\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"delete-the-application-instance",children:"Delete the Application instance"}),"\n",(0,t.jsx)(n.p,{children:"KRO can also help you clean up resources when you're done with them."}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Delete the Application instance"}),": Clean up the resources by deleting the\nApplication instance:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"kubectl delete application my-application-instance\n"})}),"\n",(0,t.jsx)(n.p,{children:"Now, the resources created by the Application instance will be deleted."}),"\n"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>c});var r=s(6540);const t={},i=r.createContext(t);function a(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);