"use strict";(self.webpackChunksymphony_docs=self.webpackChunksymphony_docs||[]).push([[953],{9108:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var a=s(4848),t=s(8453);const i={sidebar_position:10},o="EKSCluster",c={id:"examples/ekscluster",title:"EKSCluster",description:"",source:"@site/docs/examples/ekscluster.md",sourceDirName:"examples",slug:"/examples/ekscluster",permalink:"/docs/examples/ekscluster",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/examples/ekscluster.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"examplesSidebar",previous:{title:"DeploymentService",permalink:"/docs/examples/deploymentservice"},next:{title:"DeploymentDBInstance",permalink:"/docs/examples/deploymentdbinstance"}},r={},l=[];function u(e){const n={code:"code",h1:"h1",header:"header",pre:"pre",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"ekscluster",children:"EKSCluster"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",metastring:'title="ekscluster-rg.yaml"',children:'apiVersion: x.symphony.k8s.aws/v1alpha1\nkind: ResourceGroup\nmetadata:\n  name: ekscluster.x.symphony.k8s.aws\nspec:\n  # CRD Definition\n  apiVersion: v1alpha1\n  kind: EKSCluster\n\n  definition:\n    spec:\n      name: string\n      version: string\n      numNodes: integer\n      \n  # resources\n  resources:\n  - name: clusterVPC\n    definition:\n      apiVersion: ec2.services.k8s.aws/v1alpha1\n      kind: VPC\n      metadata:\n        name: cluster-vpc-${spec.name}\n      spec:\n        cidrBlocks:\n        - 192.168.0.0/16\n        enableDNSHostnames: false\n        enableDNSSupport: true\n\n  - name: subnetAZA\n    definition:\n      apiVersion: ec2.services.k8s.aws/v1alpha1\n      kind: Subnet\n      metadata:\n        name: cluster-subnet-a-${spec.name}\n      spec:\n        availabilityZone: us-west-2a\n        cidrBlock: 192.168.0.0/18\n        vpcID: ${clusterVPC.status.vpcID}\n\n  - name: securityGroup\n    definition:\n      apiVersion: ec2.services.k8s.aws/v1alpha1\n      kind: SecurityGroup\n      metadata:\n        name: cluster-security-group-${spec.name}\n      spec:\n        vpcID: ${clusterVPC.status.vpcID}\n        name: my-eks-cluster-sg-${spec.name}\n        description: something something\n\n  - name: subnetAZB\n    definition:\n      apiVersion: ec2.services.k8s.aws/v1alpha1\n      kind: Subnet\n      metadata:\n        name: cluster-subnet-b-${spec.name}\n      spec:\n        availabilityZone: us-west-2b\n        cidrBlock: 192.168.64.0/18\n        vpcID: ${clusterVPC.status.vpcID}\n\n  - name: clusterRole\n    definition:\n      apiVersion: iam.services.k8s.aws/v1alpha1\n      kind: Role\n      metadata:\n        name: cluster-role-${spec.name}\n      spec:\n        name: cluster-role-${spec.name}\n        policies:\n        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy\n        assumeRolePolicyDocument: |\n          {\n            "Version": "2012-10-17",\n            "Statement": [\n              {\n                "Effect": "Allow",\n                "Principal": {\n                  "Service": "eks.amazonaws.com"\n                },\n                "Action": "sts:AssumeRole"\n              }\n            ]\n          }\n\n  - name: nodeRole\n    definition:\n      apiVersion: iam.services.k8s.aws/v1alpha1\n      kind: Role\n      metadata:\n        name: cluster-node-role-${spec.name}\n      spec:\n        name: cluster-node-role-${spec.name}\n        policies:\n        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly\n        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy\n        assumeRolePolicyDocument: |\n          {\n            "Version": "2012-10-17",\n            "Statement": [\n              {\n                "Effect": "Allow",\n                "Principal": {\n                  "Service": "ec2.amazonaws.com"\n                },\n                "Action": "sts:AssumeRole"\n              }\n            ]\n          }\n\n  - name: cluster\n    definition:\n      apiVersion: eks.services.k8s.aws/v1alpha1\n      kind: Cluster\n      metadata:\n        name: cluster-${spec.name}\n      spec:\n        name: cluster-${spec.name}\n        roleARN: ${clusterRole.status.ackResourceMetadata.arn}\n        version: ${spec.version}\n        resourcesVPCConfig:\n          subnetIDs:\n            - ${subnetAZA.status.subnetID}\n            - ${subnetAZB.status.subnetID}\n            \n  - name: nodegroup\n    definition:\n      apiVersion: eks.services.k8s.aws/v1alpha1\n      kind: Nodegroup\n      metadata:\n        name: nodegroup-${spec.name}\n      spec:\n        name: nodegroup-${spec.name}\n        clusterName: cluster-${spec.name}\n        subnets:\n          - ${subnetAZA.status.subnetID}\n          - ${subnetAZB.status.subnetID}\n        nodeRole: ${nodeRole.status.ackResourceMetadata.arn}\n        updateConfig:\n          maxUnavailable: 1\n        scalingConfig:\n          minSize: ${spec.numNodes}\n          maxSize: ${spec.numNodes}\n          desiredSize: ${spec.numNodes}\n'})})]})}function m(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>c});var a=s(6540);const t={},i=a.createContext(t);function o(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);