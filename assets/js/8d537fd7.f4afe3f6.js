"use strict";(self.webpackChunkkro_docs=self.webpackChunkkro_docs||[]).push([[363],{8830:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>c,metadata:()=>o,toc:()=>a});const o=JSON.parse('{"id":"docs/concepts/collections","title":"4. Collections","description":"Collections in KRO provide a powerful way to manage groups of similar resources","source":"@site/docs/docs/concepts/20-collections.md","sourceDirName":"docs/concepts","slug":"/docs/concepts/collections","permalink":"/docs/docs/concepts/collections","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/docs/concepts/20-collections.md","tags":[],"version":"current","sidebarPosition":20,"frontMatter":{"sidebar_position":20},"sidebar":"docsSidebar","previous":{"title":"3. Instances","permalink":"/docs/docs/concepts/instances"},"next":{"title":"5. Conditionals","permalink":"/docs/docs/concepts/conditionals"}}');var i=s(4848),t=s(8453);const c={sidebar_position:20},r="4. Collections",l={},a=[{value:"What are Collections?",id:"what-are-collections",level:2},{value:"Defining a Collection",id:"defining-a-collection",level:2},{value:"Key Concepts",id:"key-concepts",level:2},{value:"Using Collections in Instances",id:"using-collections-in-instances",level:2},{value:"Deployment Strategy",id:"deployment-strategy",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"4-collections",children:"4. Collections"})}),"\n",(0,i.jsxs)(n.p,{children:["Collections in KRO provide a powerful way to manage groups of similar resources\nwithin a ",(0,i.jsx)(n.strong,{children:"ResourceGroup"}),". They allow for dynamic creation and management of\nmultiple instances of a resource type based on user input."]}),"\n",(0,i.jsx)(n.h2,{id:"what-are-collections",children:"What are Collections?"}),"\n",(0,i.jsxs)(n.p,{children:["A collection is a special field in a ",(0,i.jsx)(n.strong,{children:"ResourceGroup"})," that defines a template\nfor creating multiple similar resources. Key features of collections include:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Dynamic creation of resources based on user input"}),"\n",(0,i.jsx)(n.li,{children:"Consistent structure across multiple resource instances"}),"\n",(0,i.jsx)(n.li,{children:"Simplified management of groups of related resources"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"defining-a-collection",children:"Defining a Collection"}),"\n",(0,i.jsx)(n.p,{children:"Here's an example of how to define a collection in a ResourceGroup:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"apiVersion: kro.run/v1alpha1\nkind: ResourceGroup\nmetadata:\n  name: replica-set\nspec:\n  kind: ReplicaSet\n  apiVersion: v1alpha1\n  parameters:\n    spec:\n      clusterName: string\n      podCount: integer | minimum=1 maximum=5\n  resources:\n    - name: nodesCollection\n      collection:\n        index: ${range(0, schema.spec.podCount)}\n        definition:\n          apiVersion: v1\n          kind: Pod\n          metadata:\n            name: ${clusterName}-node-${index}\n          spec:\n            containers:\n              - name: db\n                image: nginx:latest\n"})}),"\n",(0,i.jsxs)(n.p,{children:["In this example, ",(0,i.jsx)(n.code,{children:"nodes"})," is a collection that will create multiple Pod resources\nbased on the ",(0,i.jsx)(n.code,{children:"podCount"})," parameter."]}),"\n",(0,i.jsx)(n.h2,{id:"key-concepts",children:"Key Concepts"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"index"}),": Specifies the range of values for the collection, allowing for\ndynamic creation of multiple resources."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"definition"}),": Defines the structure of each resource instance in the\ncollection. The ",(0,i.jsx)(n.code,{children:"${index}"})," variable ensures uniqueness of each resource."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"using-collections-in-instances",children:"Using Collections in Instances"}),"\n",(0,i.jsx)(n.p,{children:"When creating an instance, users can specify the count for the collection:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"apiVersion: kro.run/v1alpha1\nkind: ReplicaSet\nmetadata:\n  name: my-db-cluster\nspec:\n  clusterName: production-db\n  podCount: 3\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This instance will result in the creation of three Postgres Pods named\n",(0,i.jsx)(n.code,{children:"production-db-node-0"}),", ",(0,i.jsx)(n.code,{children:"production-db-node-1"}),", and ",(0,i.jsx)(n.code,{children:"production-db-node-2"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"deployment-strategy",children:"Deployment Strategy"}),"\n",(0,i.jsx)(n.p,{children:"While defining collections is straightforward, it's essential to consider the\ndeployment strategy for managing multiple resources. KRO provides flexibility in\nmanaging collections, allowing users to define how resources are created,\nupdated, and deleted based on the desired state."}),"\n",(0,i.jsx)(n.p,{children:"KRO provide two strategies for managing collections:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"RollingUpdate"}),": Creates, updates and deletes resources in an incremental\nmanner, ensuring that only one resource is updated at a time."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"ParallelUpdate"}),": Creates, updates and deletes resources in parallel,\nallowing for faster deployment of multiple resources."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["For examples you can add the following to the ",(0,i.jsx)(n.code,{children:"spec"})," section of the\n",(0,i.jsx)(n.code,{children:"ResourceGroup"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"spec:\n  kind: ReplicaSet\n  apiVersion: v1alpha1\n  parameters:\n    spec:\n      clusterName: string\n      podCount: integer | minimum=1 maximum=5\n  resources:\n    - name: nodes\n      strategy: RollingUpdate\n      collection:\n        index: ${range(0, schema.spec.podCount)}\n        definition:\n          apiVersion: v1\n          kind: Pod\n          metadata:\n            name: ${clusterName}-node-${index}\n          spec:\n            containers:\n              - name: db\n                image: nginx:latest\n"})})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>r});var o=s(6540);const i={},t=o.createContext(i);function c(e){const n=o.useContext(t);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),o.createElement(t.Provider,{value:n},e.children)}}}]);