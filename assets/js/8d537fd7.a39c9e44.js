"use strict";(self.webpackChunksymphony_docs=self.webpackChunksymphony_docs||[]).push([[363],{1653:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>r,contentTitle:()=>c,default:()=>p,frontMatter:()=>t,metadata:()=>l,toc:()=>a});var o=s(4848),i=s(8453);const t={sidebar_position:20},c="4. Collections",l={id:"docs/concepts/collections",title:"4. Collections",description:"Collections in Symphony provide a powerful way to manage groups of similar",source:"@site/docs/docs/concepts/20-collections.md",sourceDirName:"docs/concepts",slug:"/docs/concepts/collections",permalink:"/docs/docs/concepts/collections",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/docs/concepts/20-collections.md",tags:[],version:"current",sidebarPosition:20,frontMatter:{sidebar_position:20},sidebar:"docsSidebar",previous:{title:"3. Claims",permalink:"/docs/docs/concepts/claims"},next:{title:"5. Conditionals",permalink:"/docs/docs/concepts/conditionals"}},r={},a=[{value:"What are Collections?",id:"what-are-collections",level:2},{value:"Defining a Collection",id:"defining-a-collection",level:2},{value:"Key Concepts",id:"key-concepts",level:2},{value:"Using Collections in Claims",id:"using-collections-in-claims",level:2},{value:"Deployment Strategy",id:"deployment-strategy",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"4-collections",children:"4. Collections"})}),"\n",(0,o.jsxs)(n.p,{children:["Collections in Symphony provide a powerful way to manage groups of similar\nresources within a ",(0,o.jsx)(n.strong,{children:"ResourceGroup"}),". They allow for dynamic creation and\nmanagement of multiple instances of a resource type based on user input."]}),"\n",(0,o.jsx)(n.h2,{id:"what-are-collections",children:"What are Collections?"}),"\n",(0,o.jsxs)(n.p,{children:["A collection is a special field in a ",(0,o.jsx)(n.strong,{children:"ResourceGroup"})," that defines a template for\ncreating multiple similar resources. Key features of collections include:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Dynamic creation of resources based on user input"}),"\n",(0,o.jsx)(n.li,{children:"Consistent structure across multiple resource instances"}),"\n",(0,o.jsx)(n.li,{children:"Simplified management of groups of related resources"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"defining-a-collection",children:"Defining a Collection"}),"\n",(0,o.jsx)(n.p,{children:"Here's an example of how to define a collection in a ResourceGroup:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"apiVersion: symphony.k8s.aws/v1alpha1\nkind: ResourceGroup\nmetadata:\n  name: ReplicaSet.x.symphony.k8s.aws\nspec:\n  kind: ReplicaSet\n  apiVersion: v1alpha1\n  parameters:\n    spec:\n      clusterName: string\n      podCount: integer | minimum=1 maximum=5\n  resources:\n    - name: nodesCollection\n      collection:\n        index: ${range(0, spec.podCount)}\n        definition:\n          apiVersion: v1\n          kind: Pod\n          metadata:\n            name: ${clusterName}-node-${index}\n          spec:\n            containers:\n              - name: db\n                image: nginx:latest\n"})}),"\n",(0,o.jsxs)(n.p,{children:["In this example, ",(0,o.jsx)(n.code,{children:"nodes"})," is a collection that will create multiple Pod\nresources based on the ",(0,o.jsx)(n.code,{children:"podCount"})," parameter."]}),"\n",(0,o.jsx)(n.h2,{id:"key-concepts",children:"Key Concepts"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"index"}),": Specifies the range of values for the collection, allowing for\ndynamic creation of multiple resources."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"definition"}),": Defines the structure of each resource instance in the\ncollection. The ",(0,o.jsx)(n.code,{children:"${index}"})," variable ensures uniqueness of each resource."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"using-collections-in-claims",children:"Using Collections in Claims"}),"\n",(0,o.jsx)(n.p,{children:"When creating a claim, users can specify the count for the collection:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"apiVersion: symphony.k8s.aws/v1alpha1\nkind: ReplicaSet\nmetadata:\n  name: my-db-cluster\nspec:\n  clusterName: production-db\n  podCount: 3\n"})}),"\n",(0,o.jsxs)(n.p,{children:["This claim will result in the creation of three Postgres Pods named\n",(0,o.jsx)(n.code,{children:"production-db-node-0"}),", ",(0,o.jsx)(n.code,{children:"production-db-node-1"}),", and ",(0,o.jsx)(n.code,{children:"production-db-node-2"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"deployment-strategy",children:"Deployment Strategy"}),"\n",(0,o.jsx)(n.p,{children:"While defining collections is straightforward, it's essential to consider the\ndeployment strategy for managing multiple resources. Symphony provides\nflexibility in managing collections, allowing users to define how resources are\ncreated, updated, and deleted based on the desired state."}),"\n",(0,o.jsx)(n.p,{children:"Symphony provide two strategies for managing collections:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"RollingUpdate"}),": Creates, updates and deletes resources in an incremental manner,\nensuring that only one resource is updated at a time."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"ParallelUpdate"}),": Creates, updates and deletes resources in parallel, allowing\nfor faster deployment of multiple resources."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["For examples you can add the following to the ",(0,o.jsx)(n.code,{children:"spec"})," section of the ",(0,o.jsx)(n.code,{children:"ResourceGroup"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"spec:\n  kind: ReplicaSet\n  apiVersion: v1alpha1\n  parameters:\n    spec:\n      clusterName: string\n      podCount: integer | minimum=1 maximum=5\n  resources:\n    - name: nodes\n      strategy: RollingUpdate\n      collection:\n        index: ${range(0, spec.podCount)}\n        definition:\n          apiVersion: v1\n          kind: Pod\n          metadata:\n            name: ${clusterName}-node-${index}\n          spec:\n            containers:\n              - name: db\n                image: nginx:latest\n"})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>l});var o=s(6540);const i={},t=o.createContext(i);function c(e){const n=o.useContext(t);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),o.createElement(t.Provider,{value:n},e.children)}}}]);