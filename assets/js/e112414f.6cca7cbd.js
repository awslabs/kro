"use strict";(self.webpackChunkkro_docs=self.webpackChunkkro_docs||[]).push([[195],{5647:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"docs/concepts/resource-groups","title":"1. ResourceGroups","description":"ResourceGroups are the fundamental building blocks in KRO. They provide a","source":"@site/docs/docs/concepts/00-resource-groups.md","sourceDirName":"docs/concepts","slug":"/docs/concepts/resource-groups","permalink":"/docs/docs/concepts/resource-groups","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/docs/concepts/00-resource-groups.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"docsSidebar","previous":{"title":"Concepts","permalink":"/docs/category/concepts"},"next":{"title":"2. Simple Schema","permalink":"/docs/docs/concepts/simple-schema"}}');var o=s(4848),t=s(8453);const i={sidebar_position:1},c="1. ResourceGroups",a={},l=[{value:"What is a <strong>ResourceGroup</strong>?",id:"what-is-a-resourcegroup",level:2},{value:"Anatomy of a <strong>ResourceGroup</strong>",id:"anatomy-of-a-resourcegroup",level:2},{value:"<strong>ResourceGroup</strong> Processing",id:"resourcegroup-processing",level:2},{value:"<strong>ResourceGroup</strong> Instance Example",id:"resourcegroup-instance-example",level:2}];function p(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"1-resourcegroups",children:"1. ResourceGroups"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"ResourceGroups"})," are the fundamental building blocks in KRO. They provide a\nway to define, organize, and manage sets of related Kubernetes resources as a\nsingle, reusable unit."]}),"\n",(0,o.jsxs)(n.h2,{id:"what-is-a-resourcegroup",children:["What is a ",(0,o.jsx)(n.strong,{children:"ResourceGroup"}),"?"]}),"\n",(0,o.jsxs)(n.p,{children:["A ",(0,o.jsx)(n.strong,{children:"ResourceGroup"})," is a custom resource that serves as a blueprint for creating\nand managing a collection of Kubernetes resources. It allows you to:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Define multiple resources in a single, cohesive unit"}),"\n",(0,o.jsx)(n.li,{children:"Establish relationships and dependencies between resources"}),"\n",(0,o.jsx)(n.li,{children:"Create high-level abstractions of complex Kubernetes configurations"}),"\n",(0,o.jsx)(n.li,{children:"Promote reusability and consistency across your infrastructure"}),"\n"]}),"\n",(0,o.jsxs)(n.h2,{id:"anatomy-of-a-resourcegroup",children:["Anatomy of a ",(0,o.jsx)(n.strong,{children:"ResourceGroup"})]}),"\n",(0,o.jsxs)(n.p,{children:["A ",(0,o.jsx)(n.strong,{children:"ResourceGroup"}),", like any Kubernetes resource, consists of three main parts:"]}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Metadata"}),": Name, namespace, labels, etc."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Spec"}),": Defines the structure and properties of the ResourceGroup"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Status"}),": Reflects the current state of the ResourceGroup"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"spec"})," section of a ResourceGroup typically includes:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Parameters"}),": Define the customizable aspects of the ResourceGroup"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Resources"}),": Specify the Kubernetes resources to be created"]}),"\n",(0,o.jsxs)(n.li,{children:["The ",(0,o.jsx)(n.strong,{children:"kind"})," and ",(0,o.jsx)(n.strong,{children:"apiVersion"})," fields within the spec define the CRD that\nwill be generated for this ResourceGroup. Here's a simple example of a\nResourceGroup:"]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",metastring:'text title="simple-web-app.yaml"',children:"apiVersion: kro.run/v1\nkind: ResourceGroup\nmetadata:\n  name: simple-web-app\nspec:\n  kind: SimpleWebApp\n  apiVersion: v1alpha1\n  parameters:\n    appName: string\n    image: string\n    replicas: int\n  resources:\n    - name: deployment\n      definition:\n        apiVersion: apps/v1\n        kind: Deployment\n        metadata:\n          name: ${schema.spec.appName}-deployment\n        spec:\n          replicas: ${schema.spec.replicas}\n          selector:\n            matchLabels:\n              app: ${schema.spec.appName}\n          template:\n            metadata:\n              labels:\n                app: ${schema.spec.appName}\n            spec:\n              containers:\n                - name: ${schema.spec.appName}-container\n                  image: ${schema.spec.image}\n    - name: service\n      definition:\n        apiVersion: v1\n        kind: Service\n        metadata:\n          name: ${schema.spec.appName}-service\n        spec:\n          selector:\n            app: ${schema.spec.appName}\n          ports:\n            - port: 80\n              targetPort: 80\n"})}),"\n",(0,o.jsxs)(n.p,{children:["In this example, the ",(0,o.jsx)(n.strong,{children:"ResourceGroup"})," defines a simple web application with a\nDeployment and a Service. The appName, image, and replicas are parameters that\ncan be set when instantiating this ResourceGroup."]}),"\n",(0,o.jsxs)(n.h2,{id:"resourcegroup-processing",children:[(0,o.jsx)(n.strong,{children:"ResourceGroup"})," Processing"]}),"\n",(0,o.jsxs)(n.p,{children:["When a ",(0,o.jsx)(n.strong,{children:"ResourceGroup"})," is submitted to the Kubernetes API server, the KRO\ncontroller processes it as follows:"]}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Formal Verification"}),": The controller performs a comprehensive analysis of\nthe ResourceGroup definition. This includes:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Syntax checking"}),": Ensuring all fields are correctly formatted."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Type checking"}),": Validating that parameter types match their definitions."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Semantic validation"}),": Verifying that resource relationships and\ndependencies are logically sound."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Dry-run validation"}),": Simulating the creation of resources to detect\npotential issues."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"CRD Generation"}),": The controller automatically generates a new ",(0,o.jsx)(n.strong,{children:"Custom\nResource Definition (CRD)"})," based on the ResourceGroup's specification. This\nCRD represents the type for instances of this ResourceGroup."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"CRD Registration"}),": It registers the newly generated CRD with the\nKubernetes API server, making it available for use in the cluster."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Micro-Controller Deployment"}),": KRO deploys a dedicated micro-controller for\nthis ResourceGroup. This micro-controller will listen for ",(0,o.jsx)(n.strong,{children:'"instance"\nevents'})," - instances of the CRD created in step 2. It will be responsible for\nmanaging the ",(0,o.jsx)(n.strong,{children:"lifecycle of resources"})," defined in the ResourceGroup for each\ninstance."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Status Update"}),": The controller updates the status of the ResourceGroup to\nreflect that the corresponding CRD has been created and registered."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["For example, given our ",(0,o.jsx)(n.code,{children:"simple-web-app"})," ResourceGroup, the controller would\ncreate and register a CRD named ",(0,o.jsx)(n.code,{children:"SimpleWebApps"})," (plural form of the\nResourceGroup name). This CRD defines the structure for creating instances of\nthe web application with customizable parameters. The deployed micro-controller\nwould then manage all ",(0,o.jsx)(n.strong,{children:"SimpleWebApps instances"}),", creating and managing the\nassociated ",(0,o.jsx)(n.strong,{children:"Deployments"})," and ",(0,o.jsx)(n.strong,{children:"Services"})," as defined in the ResourceGroup."]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.strong,{children:"KRO"})," controller continues to monitor the ",(0,o.jsx)(n.strong,{children:"ResourceGroup"})," for any\nchanges, updating the corresponding CRD and micro-controller as necessary."]}),"\n",(0,o.jsxs)(n.h2,{id:"resourcegroup-instance-example",children:[(0,o.jsx)(n.strong,{children:"ResourceGroup"})," Instance Example"]}),"\n",(0,o.jsxs)(n.p,{children:["After the ",(0,o.jsx)(n.strong,{children:"ResourceGroup"})," is processed, users can create instances of it.\nHere's an example of how an instance for the ",(0,o.jsx)(n.code,{children:"SimpleWebApp"})," might look:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",metastring:'title="my-web-app-instance.yaml"',children:"apiVersion: kro.run/v1alpha1\nkind: SimpleWebApp\nmetadata:\n  name: my-web-app\nspec:\n  appName: awesome-app\n  image: nginx:latest\n  replicas: 3\n"})}),"\n",(0,o.jsxs)(n.p,{children:["In the next section, we'll explore the ",(0,o.jsx)(n.code,{children:"parameters"})," and ",(0,o.jsx)(n.code,{children:"resources"})," sections of\na ",(0,o.jsx)(n.strong,{children:"ResourceGroup"})," in more detail."]})]})}function d(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>c});var r=s(6540);const o={},t=r.createContext(o);function i(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);