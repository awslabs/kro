apiVersion: x.symphony.k8s.aws/v1alpha1
kind: ResourceGroup
metadata:
  name: iamcontroller.x.symphony.k8s.aws
spec:
  apiVersion: v1alpha1
  kind: IAMController
  definition:
    spec:
      name: string | default=iam-controller
      namespace: string | default=default
      values:
        aws:
          region: string | default=us-west-2
        deployment:
          containerPort: integer | default=8080
          replicas: integer | default=1
        image:
          deletePolicy: string | default=delete
          repository: string | default=public.ecr.aws/aws-controllers-k8s/iam-controller
          tag: string | default=1.3.13
          resources:
            requests:
              memory: string | default=64Mi
              cpu: string | default=50m
            limits:
              memory: string | default=128Mi
              cpu: string | default=100m
        log:
          enabled: boolean | default=false
          level: string | default=info
        serviceAccount:
          name: string | default=ack-iam-controller-sa
          roleArn: string | required=true
  resources:
  - name: iamCRDGroup
    definition:
      apiVersion: x.symphony.k8s.aws/v1alpha1
      kind: IAMCRDGroup
      metadata:
        name: ${spec.name}-crd-group
      spec:
        name: ${spec.name}-crd-group
  - name: serviceAccount
    definition:
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: ${spec.values.serviceAccount.name}
        namespace: ${spec.namespace}
        annotations:
          eks.amazonaws.com/role-arn: ${spec.values.serviceAccount.roleArn}
  - name: deployment
    definition:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: ${spec.name}-deployment
        namespace: ${spec.namespace}
        labels:
          app.kubernetes.io.name: ${spec.name}-deployment
          app.kubernetes.io.instance: ${spec.name}
      spec:
        replicas: ${spec.values.deployment.replicas}
        selector:
          matchLabels:
            app.kubernetes.io.name: ${spec.name}-deployment
            app.kubernetes.io.instance: ${spec.name}
        template:
          metadata:
            labels:
              app.kubernetes.io.name: ${spec.name}-deployment
              app.kubernetes.io.instance: ${spec.name}
          spec:
            serviceAccountName: ${serviceAccount.metadata.name}
            containers:
            - command:
              - ./bin/controller
              args:
              - --aws-region
              - ${spec.values.aws.region}
              - --enable-development-logging=${spec.values.log.enabled}
              - --log-level
              - ${spec.values.log.level}
              - --deletion-policy
              - ${spec.values.image.deletePolicy}
              - --watch-namespace
              - ${spec.namespace}
              image: ${spec.values.image.repository}:${spec.values.image.tag}
              name: controller
              ports:
                - name: http
                  containerPort: ${spec.values.deployment.containerPort}
              resources:
                requests:
                  memory: ${spec.values.image.resources.requests.memory}
                  cpu: ${spec.values.image.resources.requests.cpu}
                limits:
                    memory: ${spec.values.image.resources.limits.memory}
                    cpu: ${spec.values.image.resources.limits.cpu}
              env:
              - name: ACK_SYSTEM_NAMESPACE
                value: ${spec.namespace}
              - name: AWS_REGION
                value: ${spec.values.aws.region}
              - name: DELETE_POLICY
                value: ${spec.values.image.deletePolicy}
              - name: ACK_LOG_LEVEL
                value: ${spec.values.log.level}              
              ports:
              - containerPort: 80
  - name: clusterRoleBinding
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: ${spec.name}-clusterrolebinding
      roleRef:
        kind: ClusterRole
        apiGroup: rbac.authorization.k8s.io
        name: ${clusterRole.metadata.name}
      subjects:
      - kind: ServiceAccount
        name: ${serviceAccount.metadata.name}
        namespace: ${serviceAccount.metadata.namespace}
  - name: clusterRole
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: ${spec.name}-clusterrole
      rules:
      - apiGroups:
        - ""
        resources:
        - configmaps
        verbs:
        - get
        - list
        - patch
        - watch
      - apiGroups:
        - ""
        resources:
        - namespaces
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - ""
        resources:
        - secrets
        verbs:
        - get
        - list
        - patch
        - watch
      - apiGroups:
        - iam.services.k8s.aws
        resources:
        - groups
        verbs:
        - create
        - delete
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - iam.services.k8s.aws
        resources:
        - groups/status
        verbs:
        - get
        - patch
        - update
      - apiGroups:
        - iam.services.k8s.aws
        resources:
        - instanceprofiles
        verbs:
        - create
        - delete
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - iam.services.k8s.aws
        resources:
        - instanceprofiles/status
        verbs:
        - get
        - patch
        - update
      - apiGroups:
        - iam.services.k8s.aws
        resources:
        - openidconnectproviders
        verbs:
        - create
        - delete
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - iam.services.k8s.aws
        resources:
        - openidconnectproviders/status
        verbs:
        - get
        - patch
        - update
      - apiGroups:
        - iam.services.k8s.aws
        resources:
        - policies
        verbs:
        - create
        - delete
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - iam.services.k8s.aws
        resources:
        - policies/status
        verbs:
        - get
        - patch
        - update
      - apiGroups:
        - iam.services.k8s.aws
        resources:
        - roles
        verbs:
        - create
        - delete
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - iam.services.k8s.aws
        resources:
        - roles/status
        verbs:
        - get
        - patch
        - update
      - apiGroups:
        - iam.services.k8s.aws
        resources:
        - users
        verbs:
        - create
        - delete
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - iam.services.k8s.aws
        resources:
        - users/status
        verbs:
        - get
        - patch
        - update
      - apiGroups:
        - services.k8s.aws
        resources:
        - adoptedresources
        verbs:
        - create
        - delete
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - services.k8s.aws
        resources:
        - adoptedresources/status
        verbs:
        - get
        - patch
        - update
      - apiGroups:
        - services.k8s.aws
        resources:
        - fieldexports
        verbs:
        - create
        - delete
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - services.k8s.aws
        resources:
        - fieldexports/status
        verbs:
        - get
        - patch
        - update