apiVersion: x.symphony.k8s.aws/v1alpha1
kind: ResourceGroup
metadata:
  name: ekscluster.x.symphony.k8s.aws
spec:
  # CRD Definition
  apiVersion: v1alpha1
  kind: EKSCluster
  definition:
    spec:
      name: string
      version: string
    status:
      networkingInfo:
        vpcID: ${clusterVPC.status.vpcID}
        subnetAZA: ${clusterSubnetA.status.subnetID}
        subnetAZB: ${clusterSubnetB.status.subnetID}
      clusterARN: ${cluster.status.ackResourceMetadata.arn}
  # resources
  resources:
  - name: clusterVPC
    definition:
      apiVersion: ec2.services.k8s.aws/v1alpha1
      kind: VPC
      metadata:
        name: symphony-cluster-vpc
      spec:
        cidrBlocks:
        - 192.168.0.0/16
        enableDNSSupport: true
        enableDNSHostnames: true
  - name: clusterElasticIPAddress
    definition:
      apiVersion: ec2.services.k8s.aws/v1alpha1
      kind: ElasticIPAddress
      metadata:
        name: symphony-cluster-eip
      spec: {}
  - name: clusterInternetGateway
    definition:
      apiVersion: ec2.services.k8s.aws/v1alpha1
      kind: InternetGateway
      metadata:
        name: symphony-cluster-igw
      spec:
        vpc: ${clusterVPC.status.vpcID}
  - name: clusterRouteTable
    definition:
      apiVersion: ec2.services.k8s.aws/v1alpha1
      kind: RouteTable
      metadata:
        name: symphony-cluster-public-route-table
      spec:
        vpcID: ${clusterVPC.status.vpcID}
        routes:
          - destinationCIDRBlock: 0.0.0.0/0
            gatewayID: ${clusterInternetGateway.status.internetGatewayID}
  - name: clusterSubnetA
    definition:
      apiVersion: ec2.services.k8s.aws/v1alpha1
      kind: Subnet
      metadata:
        name: symphony-cluster-public-subnet1
      spec:
        availabilityZone: us-west-2a
        cidrBlock: 192.168.0.0/18
        vpcID: ${clusterVPC.status.vpcID}
        routeTables: 
        - ${clusterRouteTable.status.routeTableID}
        mapPublicIPOnLaunch: true
  - name: clusterSubnetB
    definition:
      apiVersion: ec2.services.k8s.aws/v1alpha1
      kind: Subnet
      metadata:
        name: symphony-cluster-public-subnet2
      spec:
        availabilityZone: us-west-2b
        cidrBlock: 192.168.64.0/18
        vpcID: ${clusterVPC.status.vpcID}
        routeTables:
        - ${clusterRouteTable.status.routeTableID}
        mapPublicIPOnLaunch: true
  - name: clusterNATGateway
    definition:
      apiVersion: ec2.services.k8s.aws/v1alpha1
      kind: NATGateway
      metadata:
        name: symphony-cluster-natgateway1
      spec:
        subnetID: ${clusterSubnetB.status.subnetID}
        allocationID: ${clusterElasticIPAddress.status.allocationID}
  - name: clusterRole
    definition:
      apiVersion: iam.services.k8s.aws/v1alpha1
      kind: Role
      metadata:
        name: symphony-cluster-role
      spec:
        name: symphony-cluster-role
        description: "Symphony created cluster cluster role"
        policies:
          - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        assumeRolePolicyDocument: |
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": "eks.amazonaws.com"
                },
                "Action": "sts:AssumeRole"
              }
            ]
          }
  - name: clusterNodeRole
    definition:
      apiVersion: iam.services.k8s.aws/v1alpha1
      kind: Role
      metadata:
        name: symphony-cluster-node-role
      spec:
        name: symphony-cluster-node-role
        description: "Symphony created cluster node role"
        policies:
          - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
          - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
          - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        assumeRolePolicyDocument: |
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": "ec2.amazonaws.com"
                },
                "Action": "sts:AssumeRole"
              }
            ]
          }
  - name: clusterAdminRole
    definition:
      apiVersion: iam.services.k8s.aws/v1alpha1
      kind: Role
      metadata:
        name: symphony-cluster-pia-role
      spec:
        name: symphony-cluster-pia-role
        description: "Symphony created cluster admin pia role"
        policies:
          - arn:aws:iam::aws:policy/AdministratorAccess
        assumeRolePolicyDocument: |
          {
              "Version": "2012-10-17",
              "Statement": [
                  {
                      "Sid": "AllowEksAuthToAssumeRoleForPodIdentity",
                      "Effect": "Allow",
                      "Principal": {
                          "Service": "pods.eks.amazonaws.com"
                      },
                      "Action": [
                          "sts:AssumeRole",
                          "sts:TagSession"
                      ]
                  }
              ]
          }
  - name: cluster
    definition:
      apiVersion: eks.services.k8s.aws/v1alpha1
      kind: Cluster
      metadata:
        name: ${spec.name}
      spec:
        name: ${spec.name}
        accessConfig:
          authenticationMode: API_AND_CONFIG_MAP
        roleARN: ${clusterRole.status.ackResourceMetadata.arn}
        version: ${spec.version}
        resourcesVPCConfig:
          endpointPrivateAccess: false
          endpointPublicAccess: true
          subnetIDs:
          - ${clusterSubnetA.status.subnetID}
          - ${clusterSubnetB.status.subnetID}
  - name: clusterNodeGroup
    definition:
      apiVersion: eks.services.k8s.aws/v1alpha1
      kind: Nodegroup
      metadata:
        name: symphony-cluster-nodegroup
      spec:
        name: symphony-cluster-ng
        diskSize: 100
        clusterName: ${cluster.spec.name}
        subnets:
        - ${clusterSubnetA.status.subnetID}
        - ${clusterSubnetB.status.subnetID}
        nodeRole: ${clusterNodeRole.status.ackResourceMetadata.arn}
        updateConfig:
          maxUnavailable: 1
        scalingConfig:
          minSize: 1
          maxSize: 1
          desiredSize: 1 