apiVersion: kro.run/v1alpha1
kind: ResourceGroup
metadata:
  name: redis.kro.run
spec:
  schema:
    apiVersion: v1alpha1
    kind: Redis
    spec:
      name: string
    status:
      csgARN: ${cacheSubnetGroup.status.ackResourceMetadata.arn}
      subnets: ${cacheSubnetGroup.status.subnets}
      clusterARN: ${redis.status.ackResourceMetadata.arn}
  resources:
  - name: networkingStack
    template:
      apiVersion: kro.run/v1alpha1
      kind: NetworkingStack
      metadata:
        name: ${spec.name}-networking-stack
      spec:
        name: ${spec.name}-networking-stack
  - name: cacheSubnetGroup
    template:
      apiVersion: elasticache.services.k8s.aws/v1alpha1
      kind: CacheSubnetGroup
      metadata:
        name: ${spec.name}-redis-subnet-group
      spec:
        cacheSubnetGroupDescription: "Redis ElastiCache subnet group"
        cacheSubnetGroupName: ${spec.name}-redis-subnet-group
        subnetIDs:
        - ${networkingStack.status.networkingInfo.subnetAZA}
        - ${networkingStack.status.networkingInfo.subnetAZB}
        - ${networkingStack.status.networkingInfo.subnetAZC}
  - name: sg
    template:
      apiVersion: ec2.services.k8s.aws/v1alpha1
      kind: SecurityGroup
      metadata:
        name: ${spec.name}-redis-sg
      spec:
        name: ${spec.name}-redis-sg
        description: "Redis ElastiCache security group"
        vpcID: ${networkingStack.status.networkingInfo.vpcID}
        ingressRules:
        - fromPort: 6379
          toPort: 6379
          ipProtocol: tcp
          ipRanges:
          - cidrIP: 0.0.0.0/0
  - name: redis
    template:
      apiVersion: elasticache.services.k8s.aws/v1alpha1
      kind: CacheCluster
      metadata:
        name: ${spec.name}-redis
      spec:
        cacheClusterID: vote-redis-cluster
        cacheNodeType: cache.t3.micro
        cacheSubnetGroupName: ${spec.name}-redis-subnet-group
        engine: redis
        engineVersion: "7.1"
        numCacheNodes: 1
        port: 6379
        securityGroupIDs:
        - ${sg.status.id}